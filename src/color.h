/***********************************************************************************
* «аголовочный файд color.h определ€ет всего одну служебную функцию дл€ вывода 
* цвета конкретного пиксел€ в стандартный поток вывода.
* 
* “ип color €вл€етс€ псевдонимом дл€ vec3.
* 
* / ÷ветовое пространство /
* Ѕольшинство работающих с изображение€ми программ предполагают, что изображение 
* нахоидитс€ в гамма-пространстве или гамма-скорректировано, перед записью в файл.
* “.е. ко всем значени€м выполн€етс€ некоторое преобразование, перед сохранением 
* в виде байта. 
* - »зображение, которе записывает без преобразовани€, есть изображением, хранимое
*   в линейном-пространстве.
* - »зображение, к которому примен€етс€ некоторе преобразование, есть изображение 
*   хранимое в гамма-пространстве.
*
* ƒл€ преобразовани€ можно использовать "gamma-2", т.е. степень, в которую необхо- 
* возвести значение дл€ перехода из гамма-пространство в линейное пространство.
* 
* ‘ункци€ liner_to_gamma() берет обратную величину от степени перехода из гамма-
* пространства в линейное пространство, т.е. возведение в степень 1/gamma-2 или 
* вз€тие квадратного корен€.
* 
* „то дает более плавный переход при изменении значени€ параметра поглащени€ света 
* при отражении от поверхности.
***********************************************************************************/

#ifndef COLOR_H
#define COLOR_H

#include "vec3.h"
#include "interval.h"

using color = vec3;

inline double liner_to_gamma(double linear_component)
{
	if (linear_component > 0) { return std::sqrt(linear_component); }
	return 0;
}

void write_color(std::ostream& out, const color& pix_color)
{
	double r = pix_color.x();
	double g = pix_color.y();
	double b = pix_color.z();

	r = liner_to_gamma(r);
	g = liner_to_gamma(g);
	b = liner_to_gamma(b);

	/* преобразование значений компонента в диапазоне [0,1] в диапазон байтов [0,255] */
	static const interval intensity(0.000, 0.999); // clipping
	int rbyte = int(255.999 * intensity.clip(r));
	int gbyte = int(255.999 * intensity.clip(g));
	int bbyte = int(255.998 * intensity.clip(b));

	out << rbyte << ' ' << gbyte << ' ' << bbyte << '\n';
}
#endif